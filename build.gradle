ext.masterVersion = '2.0.1-SNAPSHOT'
ext.encoding = 'UTF-8'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.8.0'
    }
}

subprojects {
    apply plugin: 'groovy'

    task replaceVersion << {
        ant.replaceregexp(
            match: /(version = ')[^']*(')/,
            replace: "\\1${masterVersion}\\2",
            encoding: encoding,
            flags: 'g') {
                fileset(dir: project.projectDir) {
                    include(name: 'build.gradle')
                }
            }
    }

    task gitCommit(dependsOn: [clean, build]) << {
        def grgit = org.ajoberstar.grgit.Grgit.open(project.projectDir)
        if (version.endsWith('-SNAPSHOT')) {
            grgit.checkout(branch: 'master')
            grgit.add(patterns: ['.'], update: true)
            grgit.commit(message: "${version.replace('-SNAPSHOT', '')} dev start")
        } else {
            grgit.checkout(branch: "${version}-release", createBranch: true)
            grgit.add(patterns: ['.'], update: true)
            grgit.commit(message: "${version} released")
        }
    }

    task gitTag << {
        def grgit = org.ajoberstar.grgit.Grgit.open(project.projectDir)
        grgit.tag.add(name: version)
    }

    task gitPush << {
        def grgit = org.ajoberstar.grgit.Grgit.open(project.projectDir)
        grgit.push()
        grgit.push(tags: true)
    }

    task gitReset << {
        def revision = project.hasProperty('revision') ? project.revision : 'FETCH_HEAD'
        def grgit = org.ajoberstar.grgit.Grgit.open(project.projectDir)
        grgit.reset(commit: revision,  mode: org.ajoberstar.grgit.operation.ResetOp.Mode.HARD)
    }

    clean.mustRunAfter replaceVersion
    build.mustRunAfter clean
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}


ext.masterVersion = '2.2.0'
ext.encoding = 'UTF-8'

version = masterVersion

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.8.0'
    }
}

subprojects {
    apply plugin: 'groovy'

    task replaceVersion << {
        ant.replaceregexp(
            match: /(version = ')[^']*(')/,
            replace: "\\1${masterVersion}\\2",
            encoding: encoding,
            flags: 'g') {
                fileset(dir: project.projectDir) {
                    include(name: 'build.gradle')
                }
            }
    }

    task gitReset << {
        def revision = project.hasProperty('revision') ? project.revision : 'origin/HEAD'
        def grgit = org.ajoberstar.grgit.Grgit.open(project.projectDir)
        grgit.reset(commit: revision,  mode: org.ajoberstar.grgit.operation.ResetOp.Mode.HARD)
        grgit.checkout(branch: 'master')
        grgit.branch.remove(names: ["${masterVersion}-release"])
        grgit.branch.remove(names: ["${masterVersion}-release"])
        grgit.tag.remove(names: [masterVersion])
    }

    task gitPrepareDev << {
        def grgit = org.ajoberstar.grgit.Grgit.open(project.projectDir)
        grgit.checkout(branch: 'master')
        grgit.fetch()
        grgit.merge(head: 'origin/HEAD', mode: org.ajoberstar.grgit.operation.MergeOp.Mode.ONLY_FF)
        tasks.replaceVersion.execute();
    }

    task gitDev(dependsOn: [clean, build]) << {
        def grgit = org.ajoberstar.grgit.Grgit.open(project.projectDir)
        grgit.add(patterns: ['.'], update: true)
        grgit.commit(message: 'Next development version [ci skip]')
        grgit.push()
    }

    task gitPrepareRelease << {
        def grgit = org.ajoberstar.grgit.Grgit.open(project.projectDir)
        grgit.checkout(branch: "${masterVersion}-release", createBranch: true)
        tasks.replaceVersion.execute();
    }

    task gitRelease(dependsOn: [clean, build]) << {
        def grgit = org.ajoberstar.grgit.Grgit.open(project.projectDir)
        grgit.add(patterns: ['.'], update: true)
        grgit.commit(message: "${masterVersion} released")
        grgit.tag.add(name: masterVersion, pointsTo: "${masterVersion}-release")
        grgit.push()
        grgit.push(tags: true)
    }

    build.mustRunAfter clean
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}


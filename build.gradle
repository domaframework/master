ext.masterVersion = '2.26.0'
ext.masterDependentVersion = '2.26.0'
ext.encoding = 'UTF-8'

version = masterVersion

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.ajoberstar:grgit:2.1.1'
    }
}

subprojects {
    apply plugin: 'groovy'

    task gitReset {
        doLast {
            def revision = project.hasProperty('revision') ? project.revision : 'origin/HEAD'
            def grgit = org.ajoberstar.grgit.Grgit.open(dir: project.projectDir)
            grgit.reset(commit: revision,  mode: org.ajoberstar.grgit.operation.ResetOp.Mode.HARD)
            grgit.checkout(branch: 'master')
            grgit.branch.remove(names: ["${masterVersion}-release"])
            grgit.branch.remove(names: ["${masterVersion}-release"])
            grgit.tag.remove(names: [masterVersion])
        }
    }

    task gitPrepareDev {
        doLast {
            def grgit = org.ajoberstar.grgit.Grgit.open(dir: project.projectDir)
            grgit.checkout(branch: 'master')
            grgit.fetch()
            grgit.merge(head: 'origin/HEAD', mode: org.ajoberstar.grgit.operation.MergeOp.Mode.ONLY_FF)
            replaceVersion(project);
            replaceDependentVersion(project);            
        }
    }

    task gitDev(dependsOn: [clean, build]) {
        doLast {
            def grgit = org.ajoberstar.grgit.Grgit.open(dir: project.projectDir)
            grgit.add(patterns: ['.'], update: true)
            grgit.commit(message: 'Next development version [ci skip]')
            grgit.push()            
        }
    }

    task gitPrepareRelease {
        doLast {
            def grgit = org.ajoberstar.grgit.Grgit.open(dir: project.projectDir)
            grgit.checkout(branch: "${masterVersion}-release", createBranch: true)
            replaceVersion(project);
            replaceDependentVersion(project);            
        }
    }

    task gitRelease(dependsOn: [clean, build]) {
        doLast {
            def grgit = org.ajoberstar.grgit.Grgit.open(dir: project.projectDir)
            grgit.add(patterns: ['.'], update: true)
            grgit.commit(message: "${masterVersion} released")
            grgit.tag.add(name: masterVersion, pointsTo: "${masterVersion}-release")
            grgit.push()
            grgit.push(tags: true)            
        }
    }

    build.mustRunAfter clean
}

def replaceVersion(project) {
    ant.replaceregexp(
        match: /(version = ')[^']*(')/,
        replace: "\\1${masterVersion}\\2",
        encoding: encoding,
        flags: 'g') {
            fileset(dir: project.projectDir) {
                include(name: 'build.gradle')
            }
        }
}

def replaceDependentVersion(project) {
    ant.replaceregexp(
        match: /(ext\.dependentVersion = ')[^']*(')/,
        replace: "\\1${masterDependentVersion}\\2",
        encoding: encoding,
        flags: 'g') {
            fileset(dir: project.projectDir) {
                include(name: 'build.gradle')
            }
        }
}
